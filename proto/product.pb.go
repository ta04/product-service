// Code generated by protoc-gen-go. DO NOT EDIT.
// source: product.proto

package com_ta04_srv_product

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Product is a message for product
type Product struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Price                float64  `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"`
	Picture              string   `protobuf:"bytes,5,opt,name=picture,proto3" json:"picture,omitempty"`
	Status               bool     `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Product) Reset()         { *m = Product{} }
func (m *Product) String() string { return proto.CompactTextString(m) }
func (*Product) ProtoMessage()    {}
func (*Product) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0fd8b59378f44a5, []int{0}
}

func (m *Product) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Product.Unmarshal(m, b)
}
func (m *Product) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Product.Marshal(b, m, deterministic)
}
func (m *Product) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Product.Merge(m, src)
}
func (m *Product) XXX_Size() int {
	return xxx_messageInfo_Product.Size(m)
}
func (m *Product) XXX_DiscardUnknown() {
	xxx_messageInfo_Product.DiscardUnknown(m)
}

var xxx_messageInfo_Product proto.InternalMessageInfo

func (m *Product) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Product) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Product) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Product) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Product) GetPicture() string {
	if m != nil {
		return m.Picture
	}
	return ""
}

func (m *Product) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

// IndexProductRequest is a message for IndexProducts
type IndexProductsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IndexProductsRequest) Reset()         { *m = IndexProductsRequest{} }
func (m *IndexProductsRequest) String() string { return proto.CompactTextString(m) }
func (*IndexProductsRequest) ProtoMessage()    {}
func (*IndexProductsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0fd8b59378f44a5, []int{1}
}

func (m *IndexProductsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IndexProductsRequest.Unmarshal(m, b)
}
func (m *IndexProductsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IndexProductsRequest.Marshal(b, m, deterministic)
}
func (m *IndexProductsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexProductsRequest.Merge(m, src)
}
func (m *IndexProductsRequest) XXX_Size() int {
	return xxx_messageInfo_IndexProductsRequest.Size(m)
}
func (m *IndexProductsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexProductsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IndexProductsRequest proto.InternalMessageInfo

// Response is a response message
type Response struct {
	Product              *Product   `protobuf:"bytes,1,opt,name=product,proto3" json:"product,omitempty"`
	Error                *Error     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Products             []*Product `protobuf:"bytes,3,rep,name=products,proto3" json:"products,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0fd8b59378f44a5, []int{2}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetProduct() *Product {
	if m != nil {
		return m.Product
	}
	return nil
}

func (m *Response) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetProducts() []*Product {
	if m != nil {
		return m.Products
	}
	return nil
}

// Error is an error message
type Error struct {
	Code                 string   `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0fd8b59378f44a5, []int{3}
}

func (m *Error) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Error.Unmarshal(m, b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Error.Marshal(b, m, deterministic)
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return xxx_messageInfo_Error.Size(m)
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Product)(nil), "com.ta04.srv.product.Product")
	proto.RegisterType((*IndexProductsRequest)(nil), "com.ta04.srv.product.IndexProductsRequest")
	proto.RegisterType((*Response)(nil), "com.ta04.srv.product.Response")
	proto.RegisterType((*Error)(nil), "com.ta04.srv.product.Error")
}

func init() {
	proto.RegisterFile("product.proto", fileDescriptor_f0fd8b59378f44a5)
}

var fileDescriptor_f0fd8b59378f44a5 = []byte{
	// 359 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0x3f, 0x4f, 0xfb, 0x30,
	0x14, 0xfc, 0xb9, 0x69, 0xfa, 0xe7, 0xe5, 0xd7, 0x0e, 0x56, 0x55, 0x59, 0x20, 0x50, 0x94, 0x29,
	0x62, 0x88, 0xa0, 0x80, 0x10, 0x3b, 0x0c, 0x2c, 0x50, 0x5c, 0x31, 0x32, 0x84, 0xe4, 0x09, 0x32,
	0x34, 0x36, 0xb6, 0x53, 0xe0, 0x93, 0xf0, 0x39, 0x18, 0xf8, 0x7e, 0x28, 0xae, 0x83, 0x40, 0x8a,
	0x80, 0xa1, 0xdb, 0x3b, 0xfb, 0xde, 0xe5, 0xee, 0x14, 0xc3, 0x48, 0x2a, 0x91, 0x57, 0x99, 0x49,
	0xa4, 0x12, 0x46, 0xd0, 0x49, 0x26, 0x96, 0x89, 0x49, 0xf7, 0x8f, 0x12, 0xad, 0x56, 0x89, 0xbb,
	0x8b, 0x5e, 0x09, 0xf4, 0xe7, 0xeb, 0x99, 0x8e, 0xa1, 0x53, 0xe4, 0x8c, 0x84, 0x24, 0xf6, 0x79,
	0xa7, 0xc8, 0x29, 0x85, 0x6e, 0x99, 0x2e, 0x91, 0x75, 0x42, 0x12, 0x0f, 0xb9, 0x9d, 0x69, 0x08,
	0x41, 0x8e, 0x3a, 0x53, 0x85, 0x34, 0x85, 0x28, 0x99, 0x67, 0xaf, 0xbe, 0x1e, 0xd1, 0x09, 0xf8,
	0x52, 0x15, 0x19, 0xb2, 0x6e, 0x48, 0x62, 0xc2, 0xd7, 0x80, 0x32, 0xe8, 0xcb, 0x22, 0x33, 0x95,
	0x42, 0xe6, 0xdb, 0x9d, 0x06, 0xd2, 0x29, 0xf4, 0xb4, 0x49, 0x4d, 0xa5, 0x59, 0x2f, 0x24, 0xf1,
	0x80, 0x3b, 0x14, 0x4d, 0x61, 0x72, 0x51, 0xe6, 0xf8, 0xec, 0xdc, 0x69, 0x8e, 0x8f, 0x15, 0x6a,
	0x13, 0xbd, 0x11, 0x18, 0x70, 0xd4, 0x52, 0x94, 0x1a, 0xe9, 0x09, 0xf4, 0x5d, 0x12, 0xeb, 0x3b,
	0x98, 0xed, 0x24, 0x6d, 0x31, 0x13, 0x27, 0xc2, 0x1b, 0x36, 0x3d, 0x00, 0x1f, 0x95, 0x12, 0xca,
	0x86, 0x0b, 0x66, 0xdb, 0xed, 0x6b, 0xe7, 0x35, 0x85, 0xaf, 0x99, 0xf4, 0x14, 0x06, 0xee, 0x5c,
	0x33, 0x2f, 0xf4, 0x7e, 0xff, 0xd8, 0x27, 0x3d, 0x3a, 0x06, 0xdf, 0x4a, 0xd5, 0x95, 0x66, 0x22,
	0x47, 0x6b, 0x76, 0xc8, 0xed, 0x5c, 0x57, 0xb3, 0x44, 0xad, 0xd3, 0xfb, 0xa6, 0xe9, 0x06, 0xce,
	0xde, 0x3d, 0x18, 0x3b, 0xb1, 0x05, 0xaa, 0x55, 0xdd, 0xe3, 0x2d, 0x8c, 0xbe, 0xb5, 0x42, 0xf7,
	0xda, 0x3d, 0xb4, 0x55, 0xb7, 0xb5, 0xdb, 0xce, 0x6d, 0xda, 0x8c, 0xfe, 0xd1, 0x4b, 0x08, 0x16,
	0x0f, 0xe2, 0xa9, 0xf9, 0x23, 0x7e, 0x0e, 0xf8, 0x07, 0xbd, 0x2b, 0xf8, 0xbf, 0x30, 0x42, 0xe1,
	0xc6, 0x04, 0xe7, 0x30, 0xba, 0x91, 0x79, 0x6a, 0x36, 0xa7, 0x78, 0x0d, 0xe3, 0x33, 0xd4, 0x46,
	0x89, 0x97, 0x4d, 0x49, 0xde, 0xf5, 0xec, 0x8b, 0x3b, 0xfc, 0x08, 0x00, 0x00, 0xff, 0xff, 0x34,
	0x31, 0x4b, 0x8f, 0x82, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ProductService service

type ProductServiceClient interface {
	// IndexProduct is a method to index all products
	IndexProducts(ctx context.Context, in *IndexProductsRequest, opts ...client.CallOption) (*Response, error)
	// ShowProduct is a method to show a product
	ShowProduct(ctx context.Context, in *Product, opts ...client.CallOption) (*Response, error)
	// StoreProduct is a method to store a new product
	StoreProduct(ctx context.Context, in *Product, opts ...client.CallOption) (*Response, error)
	// UpdateProduct is a method to update a product
	UpdateProduct(ctx context.Context, in *Product, opts ...client.CallOption) (*Response, error)
	// DestroyProduct is a method to delete a product
	DestroyProduct(ctx context.Context, in *Product, opts ...client.CallOption) (*Response, error)
}

type productServiceClient struct {
	c           client.Client
	serviceName string
}

func NewProductServiceClient(serviceName string, c client.Client) ProductServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "com.ta04.srv.product"
	}
	return &productServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *productServiceClient) IndexProducts(ctx context.Context, in *IndexProductsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "ProductService.IndexProducts", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ShowProduct(ctx context.Context, in *Product, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "ProductService.ShowProduct", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) StoreProduct(ctx context.Context, in *Product, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "ProductService.StoreProduct", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateProduct(ctx context.Context, in *Product, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "ProductService.UpdateProduct", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DestroyProduct(ctx context.Context, in *Product, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "ProductService.DestroyProduct", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProductService service

type ProductServiceHandler interface {
	// IndexProduct is a method to index all products
	IndexProducts(context.Context, *IndexProductsRequest, *Response) error
	// ShowProduct is a method to show a product
	ShowProduct(context.Context, *Product, *Response) error
	// StoreProduct is a method to store a new product
	StoreProduct(context.Context, *Product, *Response) error
	// UpdateProduct is a method to update a product
	UpdateProduct(context.Context, *Product, *Response) error
	// DestroyProduct is a method to delete a product
	DestroyProduct(context.Context, *Product, *Response) error
}

func RegisterProductServiceHandler(s server.Server, hdlr ProductServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&ProductService{hdlr}, opts...))
}

type ProductService struct {
	ProductServiceHandler
}

func (h *ProductService) IndexProducts(ctx context.Context, in *IndexProductsRequest, out *Response) error {
	return h.ProductServiceHandler.IndexProducts(ctx, in, out)
}

func (h *ProductService) ShowProduct(ctx context.Context, in *Product, out *Response) error {
	return h.ProductServiceHandler.ShowProduct(ctx, in, out)
}

func (h *ProductService) StoreProduct(ctx context.Context, in *Product, out *Response) error {
	return h.ProductServiceHandler.StoreProduct(ctx, in, out)
}

func (h *ProductService) UpdateProduct(ctx context.Context, in *Product, out *Response) error {
	return h.ProductServiceHandler.UpdateProduct(ctx, in, out)
}

func (h *ProductService) DestroyProduct(ctx context.Context, in *Product, out *Response) error {
	return h.ProductServiceHandler.DestroyProduct(ctx, in, out)
}
